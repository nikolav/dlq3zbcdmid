schema {
  query: Query
  mutation: Mutation
}

scalar JsonData
scalar JsonDocsTags

type Var {
  id: ID!
  name: String!
  value: String
}

type StorageFileInfo {
  id: ID!
  file_id: String!
  user_id: Int!
  title: String!
  description: String!
  filename: String!
  path: String!
  size: Int!
  mimetype: String!
  public: Boolean!
  created_at: String!
  updated_at: String!
}

type StorageFileRemovedDataInfo {
  file_id: String!
  user_id: Int!
  title: String!
  description: String!
  filename: String!
  path: String!
  size: Int!
  mimetype: String!
  public: Boolean!
}

type StorageFileRemovedInfoSuccess {
  id: ID!
  data: StorageFileRemovedDataInfo!
  created_at: String!
  updated_at: String!
}

type StorageFileRemovedInfo {
  error: String
  file: StorageFileRemovedInfoSuccess
}

type Product {
  id: ID!
  user_id: ID
  name: String!
  created_at: String!
  updated_at: String!
}

type Company {
  id: ID!
  email: String!
  password: String!
  created_at: String!
  updated_at: String!
}

type Query {
  
  status: String!

  # docs
  docsByTopic(topic: String!): [JsonData!]!
  docByDocId(doc_id: String!): JsonData!
  tagsByDocId(id: ID!): [String!]!

  # vars
  vars: [Var!]!

  # storage
  storageList: [StorageFileInfo!]!

  # products
  productsListByUser(user_id: ID!): [Product!]!
  productsListByTags(tags: [String!]!): [Product!]!

  # companies
  companiesList(approved: Boolean): [Company!]!
}

type Mutation {

  # storage
  storageRemoveFile(file_id: String!): StorageFileRemovedInfo

  # docs
  docsUpsert(topic: String!, data: JsonData!, id: ID): JsonData!
  docsRm(topic: String!, id: ID!): JsonData
  docUpsert(doc_id: String!, data: JsonData!): JsonData!
  docsRmById(id: ID!): JsonData

  # manage docs/tags: id, { "@tag/foo": true, "@tag/bar": false }
  docsTags(id: ID!, tags: JsonDocsTags!): JsonDocsTags!

  # products
  productsAdd(name: String!, user_id: ID!, tags: [String!]): Product
}
